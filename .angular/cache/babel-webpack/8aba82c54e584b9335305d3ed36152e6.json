{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.baseUri = 'http://localhost:3000';\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n    } // ----- USER API ------\n\n\n    createUser(data) {\n      let url = `${this.baseUri}/user`;\n      return this.http.post(url, data).pipe(catchError(this.errorHandler));\n    }\n\n    getUsers() {\n      return this.http.get(`${this.baseUri}`);\n    }\n\n    getUser(id) {\n      let url = `${this.baseUri}/user/${id}`;\n      return this.http.get(url, {\n        headers: this.headers\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.errorHandler));\n    }\n\n    updateUser(id, data) {\n      let url = `${this.baseUri}/user/${id}`;\n      return this.http.patch(url, data, {\n        headers: this.headers\n      }).pipe(catchError(this.errorHandler));\n    }\n\n    deleteUser(id) {\n      let url = `${this.baseUri}/user/${id}`;\n      return this.http.delete(url, {\n        headers: this.headers\n      }).pipe(catchError(this.errorHandler));\n    }\n\n    login(data) {\n      let url = `${this.baseUri}/user/login`;\n      return this.http.post(url, data).pipe(catchError(this.errorHandler));\n    } // WINE API\n\n\n    searchWine(data) {\n      let url = `${this.baseUri}/wine/search/advanced`;\n      return this.http.post(url, data).pipe(catchError(this.errorHandler));\n    }\n\n    errorHandler(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}